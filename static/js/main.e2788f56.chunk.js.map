{"version":3,"sources":["components/Subject.js","components/TOC.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Subject","console","log","react_default","a","createElement","href","onClick","e","preventDefault","this","props","onChangePage","bind","title","sub","Component","TOC","lists","data","i","length","push","key","id","Content","desc","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mode","subject","welcome","contents","_title","_desc","className","components_Subject","setState","components_TOC","components_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAkBeA,0LAZd,OADAC,QAAQC,IAAI,kBAEVC,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,IAAIC,QAAS,SAASC,GACjCA,EAAEC,iBACFC,KAAKC,MAAMC,gBACVC,KAAKH,OAAQA,KAAKC,MAAMG,QACzBJ,KAAKC,MAAMI,YATMC,cCoBPC,mLAlBXhB,QAAQC,IAAI,cAIZ,IAHA,IAAIgB,EAAQ,GACRC,EAAOT,KAAKC,MAAMQ,KAClBC,EAAI,EACFA,EAAID,EAAKE,QACbH,EAAMI,KAAKnB,EAAAC,EAAAC,cAAA,MAAIkB,IAAKJ,EAAKC,GAAGI,IAAIrB,EAAAC,EAAAC,cAAA,KAAGC,KAAM,YAAYa,EAAKC,GAAGI,IAAKL,EAAKC,GAAGN,SAC1EM,GAAQ,EAEZ,OACCjB,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAAA,UACGa,WAbOF,aCYHS,mLATb,OADAxB,QAAQC,IAAI,kBAEXC,EAAAC,EAAAC,cAAA,eACKF,EAAAC,EAAAC,cAAA,UAAKK,KAAKC,MAAMG,OACfJ,KAAKC,MAAMe,aANEV,aCyDPW,cArDX,SAAAA,EAAYhB,GAAM,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,KAAMC,KACDuB,MAAQ,CACXC,KAAK,OACLC,QAAQ,CAACtB,MAAO,MAAOC,IAAK,mBAC5BsB,QAAQ,CAACvB,MAAO,UAAWY,KAAM,kBACjCY,SAAU,CACR,CAACd,GAAG,EAAGV,MAAM,OAAQY,KAAK,2BAC1B,CAACF,GAAG,EAAGV,MAAM,MAAOY,KAAK,qBACzB,CAACF,GAAG,EAAGV,MAAM,aAAcY,KAAK,mCATlBE,wEAelB,IAAIW,EAAQC,EAAQ,KASpB,MARwB,YAApB9B,KAAKwB,MAAMC,MACbI,EAAS7B,KAAKwB,MAAMG,QAAQvB,MAC5B0B,EAAQ9B,KAAKwB,MAAMG,QAAQX,MACE,SAApBhB,KAAKwB,MAAMC,OACpBI,EAAS7B,KAAKwB,MAAMI,SAAS,GAAGxB,MAChC0B,EAAQ9B,KAAKwB,MAAMI,SAAS,GAAGZ,MAI/BvB,EAAAC,EAAAC,cAAA,OAAKoC,UAAU,OACbtC,EAAAC,EAAAC,cAACqC,EAAD,CACE5B,MAAOJ,KAAKwB,MAAME,QAAQtB,MAC1BC,IAAKL,KAAKwB,MAAME,QAAQrB,IACxBH,aAAc,WACZF,KAAKiC,SAAS,CACZR,KAAM,aAERtB,KAAKH,QAabP,EAAAC,EAAAC,cAACuC,EAAD,CAAKzB,KAAMT,KAAKwB,MAAMI,WACtBnC,EAAAC,EAAAC,cAACwC,EAAD,CAAS/B,MAAOyB,EAAQb,KAAMc,YAhDhBxB,aCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2788f56.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// Subject 태그\r\nclass Subject extends Component{\r\n  render() {  \r\n\tconsole.log(\"Subject render\")\r\n\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<h1><a href=\"/\" onClick={function(e){\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tthis.props.onChangePage();\r\n\t\t\t\t}.bind(this)}>{this.props.title}</a></h1>\r\n\t\t\t\t{this.props.sub}\r\n\t\t\t</header>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default Subject ","import React, { Component } from 'react';\r\n\r\n// TOC 태그\r\nclass TOC extends Component{\r\n\trender() {\r\n    console.log(\"Toc render\")\r\n    var lists = [];\r\n    var data = this.props.data;\r\n    var i = 0;\r\n    while(i < data.length){\r\n      lists.push(<li key={data[i].id}><a href={\"/content/\"+data[i].id}>{data[i].title}</a></li>)\r\n      i = i + 1\r\n    }\r\n\t\treturn (\r\n\t\t\t<nav>\r\n        <ul>\r\n          {lists}\r\n        </ul>\r\n      </nav>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TOC","import React, { Component } from 'react';\r\n\r\n// Content 태그\r\nclass Content extends Component{\r\n\trender() {  \r\n\t\tconsole.log(\"Content render\")\r\n\t\treturn (\r\n\t\t\t<article>\r\n        <h2>{this.props.title}</h2>\r\n        {this.props.desc}\r\n      </article>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Content \r\n\r\n","import './App.css';\nimport Subject from './components/Subject'\nimport TOC from './components/TOC'\nimport Content from './components/Content'\nimport React, { Component } from 'react';\n\nclass App extends Component {\n    constructor(props){\n    super(props);\n    this.state = {\n      mode:\"read\",\n      subject:{title: \"WEB\", sub: \"World Wide Web!\"},\n      welcome:{title: \"Welcome\", desc: \"Hello, React!!\"},\n      contents: [\n        {id:1, title:\"HTML\", desc:\"HTML is for information\"},\n        {id:2, title:\"CSS\", desc:\"CSS is for design\"},\n        {id:3, title:\"JavaScript\", desc:\"JavaScript is for interactive\"},\n      ]\n    }\n  }\n\n  render() {  \n    var _title, _desc = null;\n    if (this.state.mode === \"welcome\"){\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n    } else if (this.state.mode === \"read\"){\n      _title = this.state.contents[0].title;\n      _desc = this.state.contents[0].desc;\n    }\n\n    return (\n      <div className=\"App\">\n        <Subject \n          title={this.state.subject.title} \n          sub={this.state.subject.sub}\n          onChangePage={function(){\n            this.setState({\n              mode: \"welcome\"\n            });\n          }.bind(this)}\n        >\n        </Subject>\n        {/* <header>\n          <h1><a href=\"/\" onClick={function(e){\n            console.log(e);\n            e.preventDefault();\n            this.setState({\n              mode: \"welcome\"\n            });\n          }.bind(this)}>{this.state.subject.title}</a></h1>\n          {this.state.subject.sub}\n        </header> */}\n\t\t\t\t<TOC data={this.state.contents}></TOC>\n\t\t\t\t<Content title={_title} desc={_desc}></Content>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}