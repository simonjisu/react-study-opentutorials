{"version":3,"sources":["components/Subject.js","components/TOC.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Subject","console","log","react_default","a","createElement","href","onClick","e","preventDefault","this","props","onChangePage","bind","title","sub","Component","TOC","lists","data","i","length","push","key","id","data-id","target","dataset","Content","desc","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mode","selected_content_id","subject","welcome","contents","_title","_desc","className","components_Subject","setState","components_TOC","Number","components_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.670affe2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// Subject 태그\r\nclass Subject extends Component{\r\n  render() {  \r\n\tconsole.log(\"Subject render\")\r\n\treturn (\r\n\t\t\t<header>\r\n\t\t\t\t<h1><a href=\"/\" onClick={function(e){\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tthis.props.onChangePage();\r\n\t\t\t\t}.bind(this)}>{this.props.title}</a></h1>\r\n\t\t\t\t{this.props.sub}\r\n\t\t\t</header>\r\n\t\t);\r\n  }\r\n}\r\n\r\nexport default Subject ","import React, { Component } from 'react';\r\n\r\n// TOC 태그\r\nclass TOC extends Component{\r\n\trender() {\r\n    console.log(\"Toc render\")\r\n    var lists = [];\r\n    var data = this.props.data;\r\n    var i = 0;\r\n    while(i < data.length){\r\n      lists.push(\r\n      <li key={data[i].id}>\r\n        <a \r\n          href={\"/content/\"+data[i].id}\r\n          data-id={data[i].id}\r\n          onClick={function(e){\r\n            e.preventDefault();\r\n            this.props.onChangePage(e.target.dataset.id);\r\n          }.bind(this)}\r\n        >{data[i].title}</a>\r\n      </li>\r\n      )\r\n      i = i + 1\r\n    }\r\n\t\treturn (\r\n\t\t\t<nav>\r\n        <ul>\r\n          {lists}\r\n        </ul>\r\n      </nav>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TOC","import React, { Component } from 'react';\r\n\r\n// Content 태그\r\nclass Content extends Component{\r\n\trender() {  \r\n\t\tconsole.log(\"Content render\")\r\n\t\treturn (\r\n\t\t\t<article>\r\n        <h2>{this.props.title}</h2>\r\n        {this.props.desc}\r\n      </article>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Content \r\n\r\n","import './App.css';\nimport Subject from './components/Subject'\nimport TOC from './components/TOC'\nimport Content from './components/Content'\nimport React, { Component } from 'react';\n\nclass App extends Component {\n    constructor(props){\n    super(props);\n    this.state = {\n      mode: \"welcome\",\n      selected_content_id: 1,\n      subject: {title: \"WEB\", sub: \"World Wide Web!\"},\n      welcome: {title: \"Welcome\", desc: \"Hello, React!!\"},\n      contents: [\n        {id:1, title:\"HTML\", desc:\"HTML is for information\"},\n        {id:2, title:\"CSS\", desc:\"CSS is for design\"},\n        {id:3, title:\"JavaScript\", desc:\"JavaScript is for interactive\"},\n      ]\n    }\n  }\n\n  render() {  \n    var _title, _desc = null;\n    if (this.state.mode === \"welcome\"){\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n    } else if (this.state.mode === \"read\"){\n      var i = 0;\n      while (i < this.state.contents.length){\n        var data = this.state.contents[i];\n        if (data.id === this.state.selected_content_id){\n          _title = data.title;\n          _desc = data.desc;\n          break;\n        }\n        i = i + 1\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <Subject \n          title={this.state.subject.title} \n          sub={this.state.subject.sub}\n          onChangePage={function(){\n            this.setState({\n              mode: \"welcome\"\n            });\n          }.bind(this)}\n        >\n        </Subject>\n        <TOC \n          onChangePage={function(id){\n            this.setState({\n              mode: \"read\",\n              selected_content_id: Number(id)\n            });\n          }.bind(this)}\n          data={this.state.contents}\n        >\n        </TOC>\n\t\t\t\t<Content title={_title} desc={_desc}></Content>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}